/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Provider_H
#define Provider_H

#include <arpa/inet.h>
#include <thrift/TDispatchProcessor.h>
#include "Provider_types.h"

namespace nynn { namespace mm {

class ProviderIf {
 public:
  virtual ~ProviderIf() {}
  virtual bool createSubgraph(const int32_t subgraphKey) = 0;
  virtual bool destroySubgraph(const int32_t subgraphKey) = 0;
  virtual bool attachSubgraph(const int32_t subgraphKey) = 0;
  virtual bool detachSubgraph(const int32_t subgraphKey) = 0;
  virtual void getSubgraphKeys(std::vector<int32_t> & _return) = 0;
  virtual int32_t getWidthOfVertexInterval() = 0;
  virtual bool lock(const int32_t vtxno, const int32_t flag) = 0;
  virtual bool unlock(const int32_t vtxno) = 0;
  virtual int32_t getSize(const int32_t vtxno) = 0;
  virtual int32_t getHeadBlkno(const int32_t vtxno) = 0;
  virtual int32_t getTailBlkno(const int32_t vtxno) = 0;
  virtual void readAllBlknos(std::vector<int32_t> & _return, const int32_t vtxno) = 0;
  virtual void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno) = 0;
  virtual void readn(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno, const int32_t n) = 0;
  virtual int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk) = 0;
  virtual int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk) = 0;
  virtual bool remove(const int32_t vtxno, const int32_t blkno) = 0;
  virtual int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk) = 0;
  virtual bool shift(const int32_t vtxno) = 0;
  virtual int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk) = 0;
  virtual bool pop(const int32_t vtxno) = 0;
};

class ProviderIfFactory {
 public:
  typedef ProviderIf Handler;

  virtual ~ProviderIfFactory() {}

  virtual ProviderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProviderIf* /* handler */) = 0;
};

class ProviderIfSingletonFactory : virtual public ProviderIfFactory {
 public:
  ProviderIfSingletonFactory(const boost::shared_ptr<ProviderIf>& iface) : iface_(iface) {}
  virtual ~ProviderIfSingletonFactory() {}

  virtual ProviderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProviderIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProviderIf> iface_;
};

class ProviderNull : virtual public ProviderIf {
 public:
  virtual ~ProviderNull() {}
  bool createSubgraph(const int32_t /* subgraphKey */) {
    bool _return = false;
    return _return;
  }
  bool destroySubgraph(const int32_t /* subgraphKey */) {
    bool _return = false;
    return _return;
  }
  bool attachSubgraph(const int32_t /* subgraphKey */) {
    bool _return = false;
    return _return;
  }
  bool detachSubgraph(const int32_t /* subgraphKey */) {
    bool _return = false;
    return _return;
  }
  void getSubgraphKeys(std::vector<int32_t> & /* _return */) {
    return;
  }
  int32_t getWidthOfVertexInterval() {
    int32_t _return = 0;
    return _return;
  }
  bool lock(const int32_t /* vtxno */, const int32_t /* flag */) {
    bool _return = false;
    return _return;
  }
  bool unlock(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
  int32_t getSize(const int32_t /* vtxno */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getHeadBlkno(const int32_t /* vtxno */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getTailBlkno(const int32_t /* vtxno */) {
    int32_t _return = 0;
    return _return;
  }
  void readAllBlknos(std::vector<int32_t> & /* _return */, const int32_t /* vtxno */) {
    return;
  }
  void read(std::vector<int8_t> & /* _return */, const int32_t /* vtxno */, const int32_t /* blkno */) {
    return;
  }
  void readn(std::vector<int8_t> & /* _return */, const int32_t /* vtxno */, const int32_t /* blkno */, const int32_t /* n */) {
    return;
  }
  int32_t insertPrev(const int32_t /* vtxno */, const int32_t /* nextBlkno */, const std::vector<int8_t> & /* xblk */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t insertNext(const int32_t /* vtxno */, const int32_t /* prevBlkno */, const std::vector<int8_t> & /* xblk */) {
    int32_t _return = 0;
    return _return;
  }
  bool remove(const int32_t /* vtxno */, const int32_t /* blkno */) {
    bool _return = false;
    return _return;
  }
  int32_t unshift(const int32_t /* vtxno */, const std::vector<int8_t> & /* newXHeadBlk */) {
    int32_t _return = 0;
    return _return;
  }
  bool shift(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
  int32_t push(const int32_t /* vtxno */, const std::vector<int8_t> & /* newXTailBlk */) {
    int32_t _return = 0;
    return _return;
  }
  bool pop(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Provider_createSubgraph_args__isset {
  _Provider_createSubgraph_args__isset() : subgraphKey(false) {}
  bool subgraphKey;
} _Provider_createSubgraph_args__isset;

class Provider_createSubgraph_args {
 public:

  Provider_createSubgraph_args() : subgraphKey(0) {
  }

  virtual ~Provider_createSubgraph_args() throw() {}

  int32_t subgraphKey;

  _Provider_createSubgraph_args__isset __isset;

  void __set_subgraphKey(const int32_t val) {
    subgraphKey = val;
  }

  bool operator == (const Provider_createSubgraph_args & rhs) const
  {
    if (!(subgraphKey == rhs.subgraphKey))
      return false;
    return true;
  }
  bool operator != (const Provider_createSubgraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_createSubgraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_createSubgraph_pargs {
 public:


  virtual ~Provider_createSubgraph_pargs() throw() {}

  const int32_t* subgraphKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_createSubgraph_result__isset {
  _Provider_createSubgraph_result__isset() : success(false) {}
  bool success;
} _Provider_createSubgraph_result__isset;

class Provider_createSubgraph_result {
 public:

  Provider_createSubgraph_result() : success(0) {
  }

  virtual ~Provider_createSubgraph_result() throw() {}

  bool success;

  _Provider_createSubgraph_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_createSubgraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_createSubgraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_createSubgraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_createSubgraph_presult__isset {
  _Provider_createSubgraph_presult__isset() : success(false) {}
  bool success;
} _Provider_createSubgraph_presult__isset;

class Provider_createSubgraph_presult {
 public:


  virtual ~Provider_createSubgraph_presult() throw() {}

  bool* success;

  _Provider_createSubgraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_destroySubgraph_args__isset {
  _Provider_destroySubgraph_args__isset() : subgraphKey(false) {}
  bool subgraphKey;
} _Provider_destroySubgraph_args__isset;

class Provider_destroySubgraph_args {
 public:

  Provider_destroySubgraph_args() : subgraphKey(0) {
  }

  virtual ~Provider_destroySubgraph_args() throw() {}

  int32_t subgraphKey;

  _Provider_destroySubgraph_args__isset __isset;

  void __set_subgraphKey(const int32_t val) {
    subgraphKey = val;
  }

  bool operator == (const Provider_destroySubgraph_args & rhs) const
  {
    if (!(subgraphKey == rhs.subgraphKey))
      return false;
    return true;
  }
  bool operator != (const Provider_destroySubgraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_destroySubgraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_destroySubgraph_pargs {
 public:


  virtual ~Provider_destroySubgraph_pargs() throw() {}

  const int32_t* subgraphKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_destroySubgraph_result__isset {
  _Provider_destroySubgraph_result__isset() : success(false) {}
  bool success;
} _Provider_destroySubgraph_result__isset;

class Provider_destroySubgraph_result {
 public:

  Provider_destroySubgraph_result() : success(0) {
  }

  virtual ~Provider_destroySubgraph_result() throw() {}

  bool success;

  _Provider_destroySubgraph_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_destroySubgraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_destroySubgraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_destroySubgraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_destroySubgraph_presult__isset {
  _Provider_destroySubgraph_presult__isset() : success(false) {}
  bool success;
} _Provider_destroySubgraph_presult__isset;

class Provider_destroySubgraph_presult {
 public:


  virtual ~Provider_destroySubgraph_presult() throw() {}

  bool* success;

  _Provider_destroySubgraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_attachSubgraph_args__isset {
  _Provider_attachSubgraph_args__isset() : subgraphKey(false) {}
  bool subgraphKey;
} _Provider_attachSubgraph_args__isset;

class Provider_attachSubgraph_args {
 public:

  Provider_attachSubgraph_args() : subgraphKey(0) {
  }

  virtual ~Provider_attachSubgraph_args() throw() {}

  int32_t subgraphKey;

  _Provider_attachSubgraph_args__isset __isset;

  void __set_subgraphKey(const int32_t val) {
    subgraphKey = val;
  }

  bool operator == (const Provider_attachSubgraph_args & rhs) const
  {
    if (!(subgraphKey == rhs.subgraphKey))
      return false;
    return true;
  }
  bool operator != (const Provider_attachSubgraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_attachSubgraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_attachSubgraph_pargs {
 public:


  virtual ~Provider_attachSubgraph_pargs() throw() {}

  const int32_t* subgraphKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_attachSubgraph_result__isset {
  _Provider_attachSubgraph_result__isset() : success(false) {}
  bool success;
} _Provider_attachSubgraph_result__isset;

class Provider_attachSubgraph_result {
 public:

  Provider_attachSubgraph_result() : success(0) {
  }

  virtual ~Provider_attachSubgraph_result() throw() {}

  bool success;

  _Provider_attachSubgraph_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_attachSubgraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_attachSubgraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_attachSubgraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_attachSubgraph_presult__isset {
  _Provider_attachSubgraph_presult__isset() : success(false) {}
  bool success;
} _Provider_attachSubgraph_presult__isset;

class Provider_attachSubgraph_presult {
 public:


  virtual ~Provider_attachSubgraph_presult() throw() {}

  bool* success;

  _Provider_attachSubgraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_detachSubgraph_args__isset {
  _Provider_detachSubgraph_args__isset() : subgraphKey(false) {}
  bool subgraphKey;
} _Provider_detachSubgraph_args__isset;

class Provider_detachSubgraph_args {
 public:

  Provider_detachSubgraph_args() : subgraphKey(0) {
  }

  virtual ~Provider_detachSubgraph_args() throw() {}

  int32_t subgraphKey;

  _Provider_detachSubgraph_args__isset __isset;

  void __set_subgraphKey(const int32_t val) {
    subgraphKey = val;
  }

  bool operator == (const Provider_detachSubgraph_args & rhs) const
  {
    if (!(subgraphKey == rhs.subgraphKey))
      return false;
    return true;
  }
  bool operator != (const Provider_detachSubgraph_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_detachSubgraph_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_detachSubgraph_pargs {
 public:


  virtual ~Provider_detachSubgraph_pargs() throw() {}

  const int32_t* subgraphKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_detachSubgraph_result__isset {
  _Provider_detachSubgraph_result__isset() : success(false) {}
  bool success;
} _Provider_detachSubgraph_result__isset;

class Provider_detachSubgraph_result {
 public:

  Provider_detachSubgraph_result() : success(0) {
  }

  virtual ~Provider_detachSubgraph_result() throw() {}

  bool success;

  _Provider_detachSubgraph_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_detachSubgraph_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_detachSubgraph_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_detachSubgraph_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_detachSubgraph_presult__isset {
  _Provider_detachSubgraph_presult__isset() : success(false) {}
  bool success;
} _Provider_detachSubgraph_presult__isset;

class Provider_detachSubgraph_presult {
 public:


  virtual ~Provider_detachSubgraph_presult() throw() {}

  bool* success;

  _Provider_detachSubgraph_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Provider_getSubgraphKeys_args {
 public:

  Provider_getSubgraphKeys_args() {
  }

  virtual ~Provider_getSubgraphKeys_args() throw() {}


  bool operator == (const Provider_getSubgraphKeys_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Provider_getSubgraphKeys_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getSubgraphKeys_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_getSubgraphKeys_pargs {
 public:


  virtual ~Provider_getSubgraphKeys_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getSubgraphKeys_result__isset {
  _Provider_getSubgraphKeys_result__isset() : success(false) {}
  bool success;
} _Provider_getSubgraphKeys_result__isset;

class Provider_getSubgraphKeys_result {
 public:

  Provider_getSubgraphKeys_result() {
  }

  virtual ~Provider_getSubgraphKeys_result() throw() {}

  std::vector<int32_t>  success;

  _Provider_getSubgraphKeys_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val) {
    success = val;
  }

  bool operator == (const Provider_getSubgraphKeys_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_getSubgraphKeys_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getSubgraphKeys_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getSubgraphKeys_presult__isset {
  _Provider_getSubgraphKeys_presult__isset() : success(false) {}
  bool success;
} _Provider_getSubgraphKeys_presult__isset;

class Provider_getSubgraphKeys_presult {
 public:


  virtual ~Provider_getSubgraphKeys_presult() throw() {}

  std::vector<int32_t> * success;

  _Provider_getSubgraphKeys_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Provider_getWidthOfVertexInterval_args {
 public:

  Provider_getWidthOfVertexInterval_args() {
  }

  virtual ~Provider_getWidthOfVertexInterval_args() throw() {}


  bool operator == (const Provider_getWidthOfVertexInterval_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Provider_getWidthOfVertexInterval_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getWidthOfVertexInterval_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_getWidthOfVertexInterval_pargs {
 public:


  virtual ~Provider_getWidthOfVertexInterval_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getWidthOfVertexInterval_result__isset {
  _Provider_getWidthOfVertexInterval_result__isset() : success(false) {}
  bool success;
} _Provider_getWidthOfVertexInterval_result__isset;

class Provider_getWidthOfVertexInterval_result {
 public:

  Provider_getWidthOfVertexInterval_result() : success(0) {
  }

  virtual ~Provider_getWidthOfVertexInterval_result() throw() {}

  int32_t success;

  _Provider_getWidthOfVertexInterval_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_getWidthOfVertexInterval_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_getWidthOfVertexInterval_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getWidthOfVertexInterval_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getWidthOfVertexInterval_presult__isset {
  _Provider_getWidthOfVertexInterval_presult__isset() : success(false) {}
  bool success;
} _Provider_getWidthOfVertexInterval_presult__isset;

class Provider_getWidthOfVertexInterval_presult {
 public:


  virtual ~Provider_getWidthOfVertexInterval_presult() throw() {}

  int32_t* success;

  _Provider_getWidthOfVertexInterval_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_lock_args__isset {
  _Provider_lock_args__isset() : vtxno(false), flag(false) {}
  bool vtxno;
  bool flag;
} _Provider_lock_args__isset;

class Provider_lock_args {
 public:

  Provider_lock_args() : vtxno(0), flag(0) {
  }

  virtual ~Provider_lock_args() throw() {}

  int32_t vtxno;
  int32_t flag;

  _Provider_lock_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_flag(const int32_t val) {
    flag = val;
  }

  bool operator == (const Provider_lock_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const Provider_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_lock_pargs {
 public:


  virtual ~Provider_lock_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_lock_result__isset {
  _Provider_lock_result__isset() : success(false) {}
  bool success;
} _Provider_lock_result__isset;

class Provider_lock_result {
 public:

  Provider_lock_result() : success(0) {
  }

  virtual ~Provider_lock_result() throw() {}

  bool success;

  _Provider_lock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_lock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_lock_presult__isset {
  _Provider_lock_presult__isset() : success(false) {}
  bool success;
} _Provider_lock_presult__isset;

class Provider_lock_presult {
 public:


  virtual ~Provider_lock_presult() throw() {}

  bool* success;

  _Provider_lock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_unlock_args__isset {
  _Provider_unlock_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_unlock_args__isset;

class Provider_unlock_args {
 public:

  Provider_unlock_args() : vtxno(0) {
  }

  virtual ~Provider_unlock_args() throw() {}

  int32_t vtxno;

  _Provider_unlock_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_unlock_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_unlock_pargs {
 public:


  virtual ~Provider_unlock_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_unlock_result__isset {
  _Provider_unlock_result__isset() : success(false) {}
  bool success;
} _Provider_unlock_result__isset;

class Provider_unlock_result {
 public:

  Provider_unlock_result() : success(0) {
  }

  virtual ~Provider_unlock_result() throw() {}

  bool success;

  _Provider_unlock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_unlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_unlock_presult__isset {
  _Provider_unlock_presult__isset() : success(false) {}
  bool success;
} _Provider_unlock_presult__isset;

class Provider_unlock_presult {
 public:


  virtual ~Provider_unlock_presult() throw() {}

  bool* success;

  _Provider_unlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_getSize_args__isset {
  _Provider_getSize_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_getSize_args__isset;

class Provider_getSize_args {
 public:

  Provider_getSize_args() : vtxno(0) {
  }

  virtual ~Provider_getSize_args() throw() {}

  int32_t vtxno;

  _Provider_getSize_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_getSize_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_getSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_getSize_pargs {
 public:


  virtual ~Provider_getSize_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getSize_result__isset {
  _Provider_getSize_result__isset() : success(false) {}
  bool success;
} _Provider_getSize_result__isset;

class Provider_getSize_result {
 public:

  Provider_getSize_result() : success(0) {
  }

  virtual ~Provider_getSize_result() throw() {}

  int32_t success;

  _Provider_getSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_getSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_getSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getSize_presult__isset {
  _Provider_getSize_presult__isset() : success(false) {}
  bool success;
} _Provider_getSize_presult__isset;

class Provider_getSize_presult {
 public:


  virtual ~Provider_getSize_presult() throw() {}

  int32_t* success;

  _Provider_getSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_getHeadBlkno_args__isset {
  _Provider_getHeadBlkno_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_getHeadBlkno_args__isset;

class Provider_getHeadBlkno_args {
 public:

  Provider_getHeadBlkno_args() : vtxno(0) {
  }

  virtual ~Provider_getHeadBlkno_args() throw() {}

  int32_t vtxno;

  _Provider_getHeadBlkno_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_getHeadBlkno_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_getHeadBlkno_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getHeadBlkno_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_getHeadBlkno_pargs {
 public:


  virtual ~Provider_getHeadBlkno_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getHeadBlkno_result__isset {
  _Provider_getHeadBlkno_result__isset() : success(false) {}
  bool success;
} _Provider_getHeadBlkno_result__isset;

class Provider_getHeadBlkno_result {
 public:

  Provider_getHeadBlkno_result() : success(0) {
  }

  virtual ~Provider_getHeadBlkno_result() throw() {}

  int32_t success;

  _Provider_getHeadBlkno_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_getHeadBlkno_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_getHeadBlkno_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getHeadBlkno_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getHeadBlkno_presult__isset {
  _Provider_getHeadBlkno_presult__isset() : success(false) {}
  bool success;
} _Provider_getHeadBlkno_presult__isset;

class Provider_getHeadBlkno_presult {
 public:


  virtual ~Provider_getHeadBlkno_presult() throw() {}

  int32_t* success;

  _Provider_getHeadBlkno_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_getTailBlkno_args__isset {
  _Provider_getTailBlkno_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_getTailBlkno_args__isset;

class Provider_getTailBlkno_args {
 public:

  Provider_getTailBlkno_args() : vtxno(0) {
  }

  virtual ~Provider_getTailBlkno_args() throw() {}

  int32_t vtxno;

  _Provider_getTailBlkno_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_getTailBlkno_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_getTailBlkno_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getTailBlkno_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_getTailBlkno_pargs {
 public:


  virtual ~Provider_getTailBlkno_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getTailBlkno_result__isset {
  _Provider_getTailBlkno_result__isset() : success(false) {}
  bool success;
} _Provider_getTailBlkno_result__isset;

class Provider_getTailBlkno_result {
 public:

  Provider_getTailBlkno_result() : success(0) {
  }

  virtual ~Provider_getTailBlkno_result() throw() {}

  int32_t success;

  _Provider_getTailBlkno_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_getTailBlkno_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_getTailBlkno_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_getTailBlkno_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_getTailBlkno_presult__isset {
  _Provider_getTailBlkno_presult__isset() : success(false) {}
  bool success;
} _Provider_getTailBlkno_presult__isset;

class Provider_getTailBlkno_presult {
 public:


  virtual ~Provider_getTailBlkno_presult() throw() {}

  int32_t* success;

  _Provider_getTailBlkno_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_readAllBlknos_args__isset {
  _Provider_readAllBlknos_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_readAllBlknos_args__isset;

class Provider_readAllBlknos_args {
 public:

  Provider_readAllBlknos_args() : vtxno(0) {
  }

  virtual ~Provider_readAllBlknos_args() throw() {}

  int32_t vtxno;

  _Provider_readAllBlknos_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_readAllBlknos_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_readAllBlknos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_readAllBlknos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_readAllBlknos_pargs {
 public:


  virtual ~Provider_readAllBlknos_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_readAllBlknos_result__isset {
  _Provider_readAllBlknos_result__isset() : success(false) {}
  bool success;
} _Provider_readAllBlknos_result__isset;

class Provider_readAllBlknos_result {
 public:

  Provider_readAllBlknos_result() {
  }

  virtual ~Provider_readAllBlknos_result() throw() {}

  std::vector<int32_t>  success;

  _Provider_readAllBlknos_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val) {
    success = val;
  }

  bool operator == (const Provider_readAllBlknos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_readAllBlknos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_readAllBlknos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_readAllBlknos_presult__isset {
  _Provider_readAllBlknos_presult__isset() : success(false) {}
  bool success;
} _Provider_readAllBlknos_presult__isset;

class Provider_readAllBlknos_presult {
 public:


  virtual ~Provider_readAllBlknos_presult() throw() {}

  std::vector<int32_t> * success;

  _Provider_readAllBlknos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_read_args__isset {
  _Provider_read_args__isset() : vtxno(false), blkno(false) {}
  bool vtxno;
  bool blkno;
} _Provider_read_args__isset;

class Provider_read_args {
 public:

  Provider_read_args() : vtxno(0), blkno(0) {
  }

  virtual ~Provider_read_args() throw() {}

  int32_t vtxno;
  int32_t blkno;

  _Provider_read_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const Provider_read_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const Provider_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_read_pargs {
 public:


  virtual ~Provider_read_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_read_result__isset {
  _Provider_read_result__isset() : success(false) {}
  bool success;
} _Provider_read_result__isset;

class Provider_read_result {
 public:

  Provider_read_result() {
  }

  virtual ~Provider_read_result() throw() {}

  std::vector<int8_t>  success;

  _Provider_read_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val) {
    success = val;
  }

  bool operator == (const Provider_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_read_presult__isset {
  _Provider_read_presult__isset() : success(false) {}
  bool success;
} _Provider_read_presult__isset;

class Provider_read_presult {
 public:


  virtual ~Provider_read_presult() throw() {}

  std::vector<int8_t> * success;

  _Provider_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_readn_args__isset {
  _Provider_readn_args__isset() : vtxno(false), blkno(false), n(false) {}
  bool vtxno;
  bool blkno;
  bool n;
} _Provider_readn_args__isset;

class Provider_readn_args {
 public:

  Provider_readn_args() : vtxno(0), blkno(0), n(0) {
  }

  virtual ~Provider_readn_args() throw() {}

  int32_t vtxno;
  int32_t blkno;
  int32_t n;

  _Provider_readn_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  void __set_n(const int32_t val) {
    n = val;
  }

  bool operator == (const Provider_readn_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const Provider_readn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_readn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_readn_pargs {
 public:


  virtual ~Provider_readn_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* blkno;
  const int32_t* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_readn_result__isset {
  _Provider_readn_result__isset() : success(false) {}
  bool success;
} _Provider_readn_result__isset;

class Provider_readn_result {
 public:

  Provider_readn_result() {
  }

  virtual ~Provider_readn_result() throw() {}

  std::vector<int8_t>  success;

  _Provider_readn_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val) {
    success = val;
  }

  bool operator == (const Provider_readn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_readn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_readn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_readn_presult__isset {
  _Provider_readn_presult__isset() : success(false) {}
  bool success;
} _Provider_readn_presult__isset;

class Provider_readn_presult {
 public:


  virtual ~Provider_readn_presult() throw() {}

  std::vector<int8_t> * success;

  _Provider_readn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_insertPrev_args__isset {
  _Provider_insertPrev_args__isset() : vtxno(false), nextBlkno(false), xblk(false) {}
  bool vtxno;
  bool nextBlkno;
  bool xblk;
} _Provider_insertPrev_args__isset;

class Provider_insertPrev_args {
 public:

  Provider_insertPrev_args() : vtxno(0), nextBlkno(0) {
  }

  virtual ~Provider_insertPrev_args() throw() {}

  int32_t vtxno;
  int32_t nextBlkno;
  std::vector<int8_t>  xblk;

  _Provider_insertPrev_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_nextBlkno(const int32_t val) {
    nextBlkno = val;
  }

  void __set_xblk(const std::vector<int8_t> & val) {
    xblk = val;
  }

  bool operator == (const Provider_insertPrev_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(nextBlkno == rhs.nextBlkno))
      return false;
    if (!(xblk == rhs.xblk))
      return false;
    return true;
  }
  bool operator != (const Provider_insertPrev_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_insertPrev_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_insertPrev_pargs {
 public:


  virtual ~Provider_insertPrev_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* nextBlkno;
  const std::vector<int8_t> * xblk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_insertPrev_result__isset {
  _Provider_insertPrev_result__isset() : success(false) {}
  bool success;
} _Provider_insertPrev_result__isset;

class Provider_insertPrev_result {
 public:

  Provider_insertPrev_result() : success(0) {
  }

  virtual ~Provider_insertPrev_result() throw() {}

  int32_t success;

  _Provider_insertPrev_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_insertPrev_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_insertPrev_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_insertPrev_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_insertPrev_presult__isset {
  _Provider_insertPrev_presult__isset() : success(false) {}
  bool success;
} _Provider_insertPrev_presult__isset;

class Provider_insertPrev_presult {
 public:


  virtual ~Provider_insertPrev_presult() throw() {}

  int32_t* success;

  _Provider_insertPrev_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_insertNext_args__isset {
  _Provider_insertNext_args__isset() : vtxno(false), prevBlkno(false), xblk(false) {}
  bool vtxno;
  bool prevBlkno;
  bool xblk;
} _Provider_insertNext_args__isset;

class Provider_insertNext_args {
 public:

  Provider_insertNext_args() : vtxno(0), prevBlkno(0) {
  }

  virtual ~Provider_insertNext_args() throw() {}

  int32_t vtxno;
  int32_t prevBlkno;
  std::vector<int8_t>  xblk;

  _Provider_insertNext_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_prevBlkno(const int32_t val) {
    prevBlkno = val;
  }

  void __set_xblk(const std::vector<int8_t> & val) {
    xblk = val;
  }

  bool operator == (const Provider_insertNext_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(prevBlkno == rhs.prevBlkno))
      return false;
    if (!(xblk == rhs.xblk))
      return false;
    return true;
  }
  bool operator != (const Provider_insertNext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_insertNext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_insertNext_pargs {
 public:


  virtual ~Provider_insertNext_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* prevBlkno;
  const std::vector<int8_t> * xblk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_insertNext_result__isset {
  _Provider_insertNext_result__isset() : success(false) {}
  bool success;
} _Provider_insertNext_result__isset;

class Provider_insertNext_result {
 public:

  Provider_insertNext_result() : success(0) {
  }

  virtual ~Provider_insertNext_result() throw() {}

  int32_t success;

  _Provider_insertNext_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_insertNext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_insertNext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_insertNext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_insertNext_presult__isset {
  _Provider_insertNext_presult__isset() : success(false) {}
  bool success;
} _Provider_insertNext_presult__isset;

class Provider_insertNext_presult {
 public:


  virtual ~Provider_insertNext_presult() throw() {}

  int32_t* success;

  _Provider_insertNext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_remove_args__isset {
  _Provider_remove_args__isset() : vtxno(false), blkno(false) {}
  bool vtxno;
  bool blkno;
} _Provider_remove_args__isset;

class Provider_remove_args {
 public:

  Provider_remove_args() : vtxno(0), blkno(0) {
  }

  virtual ~Provider_remove_args() throw() {}

  int32_t vtxno;
  int32_t blkno;

  _Provider_remove_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const Provider_remove_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const Provider_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_remove_pargs {
 public:


  virtual ~Provider_remove_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_remove_result__isset {
  _Provider_remove_result__isset() : success(false) {}
  bool success;
} _Provider_remove_result__isset;

class Provider_remove_result {
 public:

  Provider_remove_result() : success(0) {
  }

  virtual ~Provider_remove_result() throw() {}

  bool success;

  _Provider_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_remove_presult__isset {
  _Provider_remove_presult__isset() : success(false) {}
  bool success;
} _Provider_remove_presult__isset;

class Provider_remove_presult {
 public:


  virtual ~Provider_remove_presult() throw() {}

  bool* success;

  _Provider_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_unshift_args__isset {
  _Provider_unshift_args__isset() : vtxno(false), newXHeadBlk(false) {}
  bool vtxno;
  bool newXHeadBlk;
} _Provider_unshift_args__isset;

class Provider_unshift_args {
 public:

  Provider_unshift_args() : vtxno(0) {
  }

  virtual ~Provider_unshift_args() throw() {}

  int32_t vtxno;
  std::vector<int8_t>  newXHeadBlk;

  _Provider_unshift_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_newXHeadBlk(const std::vector<int8_t> & val) {
    newXHeadBlk = val;
  }

  bool operator == (const Provider_unshift_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(newXHeadBlk == rhs.newXHeadBlk))
      return false;
    return true;
  }
  bool operator != (const Provider_unshift_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_unshift_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_unshift_pargs {
 public:


  virtual ~Provider_unshift_pargs() throw() {}

  const int32_t* vtxno;
  const std::vector<int8_t> * newXHeadBlk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_unshift_result__isset {
  _Provider_unshift_result__isset() : success(false) {}
  bool success;
} _Provider_unshift_result__isset;

class Provider_unshift_result {
 public:

  Provider_unshift_result() : success(0) {
  }

  virtual ~Provider_unshift_result() throw() {}

  int32_t success;

  _Provider_unshift_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_unshift_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_unshift_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_unshift_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_unshift_presult__isset {
  _Provider_unshift_presult__isset() : success(false) {}
  bool success;
} _Provider_unshift_presult__isset;

class Provider_unshift_presult {
 public:


  virtual ~Provider_unshift_presult() throw() {}

  int32_t* success;

  _Provider_unshift_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_shift_args__isset {
  _Provider_shift_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_shift_args__isset;

class Provider_shift_args {
 public:

  Provider_shift_args() : vtxno(0) {
  }

  virtual ~Provider_shift_args() throw() {}

  int32_t vtxno;

  _Provider_shift_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_shift_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_shift_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_shift_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_shift_pargs {
 public:


  virtual ~Provider_shift_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_shift_result__isset {
  _Provider_shift_result__isset() : success(false) {}
  bool success;
} _Provider_shift_result__isset;

class Provider_shift_result {
 public:

  Provider_shift_result() : success(0) {
  }

  virtual ~Provider_shift_result() throw() {}

  bool success;

  _Provider_shift_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_shift_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_shift_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_shift_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_shift_presult__isset {
  _Provider_shift_presult__isset() : success(false) {}
  bool success;
} _Provider_shift_presult__isset;

class Provider_shift_presult {
 public:


  virtual ~Provider_shift_presult() throw() {}

  bool* success;

  _Provider_shift_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_push_args__isset {
  _Provider_push_args__isset() : vtxno(false), newXTailBlk(false) {}
  bool vtxno;
  bool newXTailBlk;
} _Provider_push_args__isset;

class Provider_push_args {
 public:

  Provider_push_args() : vtxno(0) {
  }

  virtual ~Provider_push_args() throw() {}

  int32_t vtxno;
  std::vector<int8_t>  newXTailBlk;

  _Provider_push_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_newXTailBlk(const std::vector<int8_t> & val) {
    newXTailBlk = val;
  }

  bool operator == (const Provider_push_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(newXTailBlk == rhs.newXTailBlk))
      return false;
    return true;
  }
  bool operator != (const Provider_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_push_pargs {
 public:


  virtual ~Provider_push_pargs() throw() {}

  const int32_t* vtxno;
  const std::vector<int8_t> * newXTailBlk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_push_result__isset {
  _Provider_push_result__isset() : success(false) {}
  bool success;
} _Provider_push_result__isset;

class Provider_push_result {
 public:

  Provider_push_result() : success(0) {
  }

  virtual ~Provider_push_result() throw() {}

  int32_t success;

  _Provider_push_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Provider_push_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_push_presult__isset {
  _Provider_push_presult__isset() : success(false) {}
  bool success;
} _Provider_push_presult__isset;

class Provider_push_presult {
 public:


  virtual ~Provider_push_presult() throw() {}

  int32_t* success;

  _Provider_push_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Provider_pop_args__isset {
  _Provider_pop_args__isset() : vtxno(false) {}
  bool vtxno;
} _Provider_pop_args__isset;

class Provider_pop_args {
 public:

  Provider_pop_args() : vtxno(0) {
  }

  virtual ~Provider_pop_args() throw() {}

  int32_t vtxno;

  _Provider_pop_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Provider_pop_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Provider_pop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_pop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Provider_pop_pargs {
 public:


  virtual ~Provider_pop_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_pop_result__isset {
  _Provider_pop_result__isset() : success(false) {}
  bool success;
} _Provider_pop_result__isset;

class Provider_pop_result {
 public:

  Provider_pop_result() : success(0) {
  }

  virtual ~Provider_pop_result() throw() {}

  bool success;

  _Provider_pop_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Provider_pop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Provider_pop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Provider_pop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Provider_pop_presult__isset {
  _Provider_pop_presult__isset() : success(false) {}
  bool success;
} _Provider_pop_presult__isset;

class Provider_pop_presult {
 public:


  virtual ~Provider_pop_presult() throw() {}

  bool* success;

  _Provider_pop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProviderClient : virtual public ProviderIf {
 public:
  ProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool createSubgraph(const int32_t subgraphKey);
  void send_createSubgraph(const int32_t subgraphKey);
  bool recv_createSubgraph();
  bool destroySubgraph(const int32_t subgraphKey);
  void send_destroySubgraph(const int32_t subgraphKey);
  bool recv_destroySubgraph();
  bool attachSubgraph(const int32_t subgraphKey);
  void send_attachSubgraph(const int32_t subgraphKey);
  bool recv_attachSubgraph();
  bool detachSubgraph(const int32_t subgraphKey);
  void send_detachSubgraph(const int32_t subgraphKey);
  bool recv_detachSubgraph();
  void getSubgraphKeys(std::vector<int32_t> & _return);
  void send_getSubgraphKeys();
  void recv_getSubgraphKeys(std::vector<int32_t> & _return);
  int32_t getWidthOfVertexInterval();
  void send_getWidthOfVertexInterval();
  int32_t recv_getWidthOfVertexInterval();
  bool lock(const int32_t vtxno, const int32_t flag);
  void send_lock(const int32_t vtxno, const int32_t flag);
  bool recv_lock();
  bool unlock(const int32_t vtxno);
  void send_unlock(const int32_t vtxno);
  bool recv_unlock();
  int32_t getSize(const int32_t vtxno);
  void send_getSize(const int32_t vtxno);
  int32_t recv_getSize();
  int32_t getHeadBlkno(const int32_t vtxno);
  void send_getHeadBlkno(const int32_t vtxno);
  int32_t recv_getHeadBlkno();
  int32_t getTailBlkno(const int32_t vtxno);
  void send_getTailBlkno(const int32_t vtxno);
  int32_t recv_getTailBlkno();
  void readAllBlknos(std::vector<int32_t> & _return, const int32_t vtxno);
  void send_readAllBlknos(const int32_t vtxno);
  void recv_readAllBlknos(std::vector<int32_t> & _return);
  void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno);
  void send_read(const int32_t vtxno, const int32_t blkno);
  void recv_read(std::vector<int8_t> & _return);
  void readn(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno, const int32_t n);
  void send_readn(const int32_t vtxno, const int32_t blkno, const int32_t n);
  void recv_readn(std::vector<int8_t> & _return);
  int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk);
  void send_insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk);
  int32_t recv_insertPrev();
  int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk);
  void send_insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk);
  int32_t recv_insertNext();
  bool remove(const int32_t vtxno, const int32_t blkno);
  void send_remove(const int32_t vtxno, const int32_t blkno);
  bool recv_remove();
  int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk);
  void send_unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk);
  int32_t recv_unshift();
  bool shift(const int32_t vtxno);
  void send_shift(const int32_t vtxno);
  bool recv_shift();
  int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk);
  void send_push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk);
  int32_t recv_push();
  bool pop(const int32_t vtxno);
  void send_pop(const int32_t vtxno);
  bool recv_pop();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProviderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProviderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProviderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createSubgraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_destroySubgraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_attachSubgraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_detachSubgraph(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSubgraphKeys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWidthOfVertexInterval(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHeadBlkno(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTailBlkno(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readAllBlknos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertPrev(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertNext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unshift(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shift(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProviderProcessor(boost::shared_ptr<ProviderIf> iface) :
    iface_(iface) {
    processMap_["createSubgraph"] = &ProviderProcessor::process_createSubgraph;
    processMap_["destroySubgraph"] = &ProviderProcessor::process_destroySubgraph;
    processMap_["attachSubgraph"] = &ProviderProcessor::process_attachSubgraph;
    processMap_["detachSubgraph"] = &ProviderProcessor::process_detachSubgraph;
    processMap_["getSubgraphKeys"] = &ProviderProcessor::process_getSubgraphKeys;
    processMap_["getWidthOfVertexInterval"] = &ProviderProcessor::process_getWidthOfVertexInterval;
    processMap_["lock"] = &ProviderProcessor::process_lock;
    processMap_["unlock"] = &ProviderProcessor::process_unlock;
    processMap_["getSize"] = &ProviderProcessor::process_getSize;
    processMap_["getHeadBlkno"] = &ProviderProcessor::process_getHeadBlkno;
    processMap_["getTailBlkno"] = &ProviderProcessor::process_getTailBlkno;
    processMap_["readAllBlknos"] = &ProviderProcessor::process_readAllBlknos;
    processMap_["read"] = &ProviderProcessor::process_read;
    processMap_["readn"] = &ProviderProcessor::process_readn;
    processMap_["insertPrev"] = &ProviderProcessor::process_insertPrev;
    processMap_["insertNext"] = &ProviderProcessor::process_insertNext;
    processMap_["remove"] = &ProviderProcessor::process_remove;
    processMap_["unshift"] = &ProviderProcessor::process_unshift;
    processMap_["shift"] = &ProviderProcessor::process_shift;
    processMap_["push"] = &ProviderProcessor::process_push;
    processMap_["pop"] = &ProviderProcessor::process_pop;
  }

  virtual ~ProviderProcessor() {}
};

class ProviderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProviderProcessorFactory(const ::boost::shared_ptr< ProviderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProviderIfFactory > handlerFactory_;
};

class ProviderMultiface : virtual public ProviderIf {
 public:
  ProviderMultiface(std::vector<boost::shared_ptr<ProviderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProviderMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProviderIf> > ifaces_;
  ProviderMultiface() {}
  void add(boost::shared_ptr<ProviderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool createSubgraph(const int32_t subgraphKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSubgraph(subgraphKey);
    }
    return ifaces_[i]->createSubgraph(subgraphKey);
  }

  bool destroySubgraph(const int32_t subgraphKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->destroySubgraph(subgraphKey);
    }
    return ifaces_[i]->destroySubgraph(subgraphKey);
  }

  bool attachSubgraph(const int32_t subgraphKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->attachSubgraph(subgraphKey);
    }
    return ifaces_[i]->attachSubgraph(subgraphKey);
  }

  bool detachSubgraph(const int32_t subgraphKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->detachSubgraph(subgraphKey);
    }
    return ifaces_[i]->detachSubgraph(subgraphKey);
  }

  void getSubgraphKeys(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSubgraphKeys(_return);
    }
    ifaces_[i]->getSubgraphKeys(_return);
    return;
  }

  int32_t getWidthOfVertexInterval() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWidthOfVertexInterval();
    }
    return ifaces_[i]->getWidthOfVertexInterval();
  }

  bool lock(const int32_t vtxno, const int32_t flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock(vtxno, flag);
    }
    return ifaces_[i]->lock(vtxno, flag);
  }

  bool unlock(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock(vtxno);
    }
    return ifaces_[i]->unlock(vtxno);
  }

  int32_t getSize(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSize(vtxno);
    }
    return ifaces_[i]->getSize(vtxno);
  }

  int32_t getHeadBlkno(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHeadBlkno(vtxno);
    }
    return ifaces_[i]->getHeadBlkno(vtxno);
  }

  int32_t getTailBlkno(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTailBlkno(vtxno);
    }
    return ifaces_[i]->getTailBlkno(vtxno);
  }

  void readAllBlknos(std::vector<int32_t> & _return, const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readAllBlknos(_return, vtxno);
    }
    ifaces_[i]->readAllBlknos(_return, vtxno);
    return;
  }

  void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, vtxno, blkno);
    }
    ifaces_[i]->read(_return, vtxno, blkno);
    return;
  }

  void readn(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno, const int32_t n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readn(_return, vtxno, blkno, n);
    }
    ifaces_[i]->readn(_return, vtxno, blkno, n);
    return;
  }

  int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertPrev(vtxno, nextBlkno, xblk);
    }
    return ifaces_[i]->insertPrev(vtxno, nextBlkno, xblk);
  }

  int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertNext(vtxno, prevBlkno, xblk);
    }
    return ifaces_[i]->insertNext(vtxno, prevBlkno, xblk);
  }

  bool remove(const int32_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(vtxno, blkno);
    }
    return ifaces_[i]->remove(vtxno, blkno);
  }

  int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unshift(vtxno, newXHeadBlk);
    }
    return ifaces_[i]->unshift(vtxno, newXHeadBlk);
  }

  bool shift(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shift(vtxno);
    }
    return ifaces_[i]->shift(vtxno);
  }

  int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push(vtxno, newXTailBlk);
    }
    return ifaces_[i]->push(vtxno, newXTailBlk);
  }

  bool pop(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pop(vtxno);
    }
    return ifaces_[i]->pop(vtxno);
  }

};

}} // namespace

#endif
