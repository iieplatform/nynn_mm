// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Producer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::nynn::mm;

class ProducerHandler : virtual public ProducerIf {
 public:
  ProducerHandler() {
    // Your initialization goes here
  }

  bool report(const std::vector<int32_t> & subgraphKeys, const std::string& hostname) {
    // Your implementation goes here
    printf("report\n");
  }

  void getHost(std::string& _return, const int32_t subgraphKey) {
    // Your implementation goes here
    printf("getHost\n");
  }

  int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk) {
    // Your implementation goes here
    printf("insertPrev\n");
  }

  int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk) {
    // Your implementation goes here
    printf("insertNext\n");
  }

  int32_t remove(const int32_t vtxno, const int32_t blkno) {
    // Your implementation goes here
    printf("remove\n");
  }

  int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk) {
    // Your implementation goes here
    printf("unshift\n");
  }

  int32_t shift(const int32_t vtxno) {
    // Your implementation goes here
    printf("shift\n");
  }

  int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk) {
    // Your implementation goes here
    printf("push\n");
  }

  int32_t pop(const int32_t vtxno) {
    // Your implementation goes here
    printf("pop\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProducerHandler> handler(new ProducerHandler());
  shared_ptr<TProcessor> processor(new ProducerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

