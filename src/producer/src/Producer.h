/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Producer_H
#define Producer_H

//#include <arpa/inet.h>
#include <thrift/TDispatchProcessor.h>
#include "Producer_types.h"


namespace nynn { namespace mm {

class ProducerIf {
 public:
  virtual ~ProducerIf() {}
  virtual bool report(const std::vector<int32_t> & subgraphKeys, const std::string& hostname) = 0;
  virtual void getHost(std::string& _return, const int32_t subgraphKey) = 0;
  virtual int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk) = 0;
  virtual int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk) = 0;
  virtual bool remove(const int32_t vtxno, const int32_t blkno) = 0;
  virtual int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk) = 0;
  virtual bool shift(const int32_t vtxno) = 0;
  virtual int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk) = 0;
  virtual bool pop(const int32_t vtxno) = 0;
};

class ProducerIfFactory {
 public:
  typedef ProducerIf Handler;

  virtual ~ProducerIfFactory() {}

  virtual ProducerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProducerIf* /* handler */) = 0;
};

class ProducerIfSingletonFactory : virtual public ProducerIfFactory {
 public:
  ProducerIfSingletonFactory(const boost::shared_ptr<ProducerIf>& iface) : iface_(iface) {}
  virtual ~ProducerIfSingletonFactory() {}

  virtual ProducerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProducerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProducerIf> iface_;
};

class ProducerNull : virtual public ProducerIf {
 public:
  virtual ~ProducerNull() {}
  bool report(const std::vector<int32_t> & /* subgraphKeys */, const std::string& /* hostname */) {
    bool _return = false;
    return _return;
  }
  void getHost(std::string& /* _return */, const int32_t /* subgraphKey */) {
    return;
  }
  int32_t insertPrev(const int32_t /* vtxno */, const int32_t /* nextBlkno */, const std::vector<int8_t> & /* xblk */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t insertNext(const int32_t /* vtxno */, const int32_t /* prevBlkno */, const std::vector<int8_t> & /* xblk */) {
    int32_t _return = 0;
    return _return;
  }
  bool remove(const int32_t /* vtxno */, const int32_t /* blkno */) {
    bool _return = false;
    return _return;
  }
  int32_t unshift(const int32_t /* vtxno */, const std::vector<int8_t> & /* newXHeadBlk */) {
    int32_t _return = 0;
    return _return;
  }
  bool shift(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
  int32_t push(const int32_t /* vtxno */, const std::vector<int8_t> & /* newXTailBlk */) {
    int32_t _return = 0;
    return _return;
  }
  bool pop(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Producer_report_args__isset {
  _Producer_report_args__isset() : subgraphKeys(false), hostname(false) {}
  bool subgraphKeys;
  bool hostname;
} _Producer_report_args__isset;

class Producer_report_args {
 public:

  Producer_report_args() : hostname() {
  }

  virtual ~Producer_report_args() throw() {}

  std::vector<int32_t>  subgraphKeys;
  std::string hostname;

  _Producer_report_args__isset __isset;

  void __set_subgraphKeys(const std::vector<int32_t> & val) {
    subgraphKeys = val;
  }

  void __set_hostname(const std::string& val) {
    hostname = val;
  }

  bool operator == (const Producer_report_args & rhs) const
  {
    if (!(subgraphKeys == rhs.subgraphKeys))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const Producer_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_report_pargs {
 public:


  virtual ~Producer_report_pargs() throw() {}

  const std::vector<int32_t> * subgraphKeys;
  const std::string* hostname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_report_result__isset {
  _Producer_report_result__isset() : success(false) {}
  bool success;
} _Producer_report_result__isset;

class Producer_report_result {
 public:

  Producer_report_result() : success(0) {
  }

  virtual ~Producer_report_result() throw() {}

  bool success;

  _Producer_report_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Producer_report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_report_presult__isset {
  _Producer_report_presult__isset() : success(false) {}
  bool success;
} _Producer_report_presult__isset;

class Producer_report_presult {
 public:


  virtual ~Producer_report_presult() throw() {}

  bool* success;

  _Producer_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_getHost_args__isset {
  _Producer_getHost_args__isset() : subgraphKey(false) {}
  bool subgraphKey;
} _Producer_getHost_args__isset;

class Producer_getHost_args {
 public:

  Producer_getHost_args() : subgraphKey(0) {
  }

  virtual ~Producer_getHost_args() throw() {}

  int32_t subgraphKey;

  _Producer_getHost_args__isset __isset;

  void __set_subgraphKey(const int32_t val) {
    subgraphKey = val;
  }

  bool operator == (const Producer_getHost_args & rhs) const
  {
    if (!(subgraphKey == rhs.subgraphKey))
      return false;
    return true;
  }
  bool operator != (const Producer_getHost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_getHost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_getHost_pargs {
 public:


  virtual ~Producer_getHost_pargs() throw() {}

  const int32_t* subgraphKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_getHost_result__isset {
  _Producer_getHost_result__isset() : success(false) {}
  bool success;
} _Producer_getHost_result__isset;

class Producer_getHost_result {
 public:

  Producer_getHost_result() : success() {
  }

  virtual ~Producer_getHost_result() throw() {}

  std::string success;

  _Producer_getHost_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Producer_getHost_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_getHost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_getHost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_getHost_presult__isset {
  _Producer_getHost_presult__isset() : success(false) {}
  bool success;
} _Producer_getHost_presult__isset;

class Producer_getHost_presult {
 public:


  virtual ~Producer_getHost_presult() throw() {}

  std::string* success;

  _Producer_getHost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_insertPrev_args__isset {
  _Producer_insertPrev_args__isset() : vtxno(false), nextBlkno(false), xblk(false) {}
  bool vtxno;
  bool nextBlkno;
  bool xblk;
} _Producer_insertPrev_args__isset;

class Producer_insertPrev_args {
 public:

  Producer_insertPrev_args() : vtxno(0), nextBlkno(0) {
  }

  virtual ~Producer_insertPrev_args() throw() {}

  int32_t vtxno;
  int32_t nextBlkno;
  std::vector<int8_t>  xblk;

  _Producer_insertPrev_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_nextBlkno(const int32_t val) {
    nextBlkno = val;
  }

  void __set_xblk(const std::vector<int8_t> & val) {
    xblk = val;
  }

  bool operator == (const Producer_insertPrev_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(nextBlkno == rhs.nextBlkno))
      return false;
    if (!(xblk == rhs.xblk))
      return false;
    return true;
  }
  bool operator != (const Producer_insertPrev_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_insertPrev_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_insertPrev_pargs {
 public:


  virtual ~Producer_insertPrev_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* nextBlkno;
  const std::vector<int8_t> * xblk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_insertPrev_result__isset {
  _Producer_insertPrev_result__isset() : success(false) {}
  bool success;
} _Producer_insertPrev_result__isset;

class Producer_insertPrev_result {
 public:

  Producer_insertPrev_result() : success(0) {
  }

  virtual ~Producer_insertPrev_result() throw() {}

  int32_t success;

  _Producer_insertPrev_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Producer_insertPrev_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_insertPrev_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_insertPrev_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_insertPrev_presult__isset {
  _Producer_insertPrev_presult__isset() : success(false) {}
  bool success;
} _Producer_insertPrev_presult__isset;

class Producer_insertPrev_presult {
 public:


  virtual ~Producer_insertPrev_presult() throw() {}

  int32_t* success;

  _Producer_insertPrev_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_insertNext_args__isset {
  _Producer_insertNext_args__isset() : vtxno(false), prevBlkno(false), xblk(false) {}
  bool vtxno;
  bool prevBlkno;
  bool xblk;
} _Producer_insertNext_args__isset;

class Producer_insertNext_args {
 public:

  Producer_insertNext_args() : vtxno(0), prevBlkno(0) {
  }

  virtual ~Producer_insertNext_args() throw() {}

  int32_t vtxno;
  int32_t prevBlkno;
  std::vector<int8_t>  xblk;

  _Producer_insertNext_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_prevBlkno(const int32_t val) {
    prevBlkno = val;
  }

  void __set_xblk(const std::vector<int8_t> & val) {
    xblk = val;
  }

  bool operator == (const Producer_insertNext_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(prevBlkno == rhs.prevBlkno))
      return false;
    if (!(xblk == rhs.xblk))
      return false;
    return true;
  }
  bool operator != (const Producer_insertNext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_insertNext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_insertNext_pargs {
 public:


  virtual ~Producer_insertNext_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* prevBlkno;
  const std::vector<int8_t> * xblk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_insertNext_result__isset {
  _Producer_insertNext_result__isset() : success(false) {}
  bool success;
} _Producer_insertNext_result__isset;

class Producer_insertNext_result {
 public:

  Producer_insertNext_result() : success(0) {
  }

  virtual ~Producer_insertNext_result() throw() {}

  int32_t success;

  _Producer_insertNext_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Producer_insertNext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_insertNext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_insertNext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_insertNext_presult__isset {
  _Producer_insertNext_presult__isset() : success(false) {}
  bool success;
} _Producer_insertNext_presult__isset;

class Producer_insertNext_presult {
 public:


  virtual ~Producer_insertNext_presult() throw() {}

  int32_t* success;

  _Producer_insertNext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_remove_args__isset {
  _Producer_remove_args__isset() : vtxno(false), blkno(false) {}
  bool vtxno;
  bool blkno;
} _Producer_remove_args__isset;

class Producer_remove_args {
 public:

  Producer_remove_args() : vtxno(0), blkno(0) {
  }

  virtual ~Producer_remove_args() throw() {}

  int32_t vtxno;
  int32_t blkno;

  _Producer_remove_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const Producer_remove_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const Producer_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_remove_pargs {
 public:


  virtual ~Producer_remove_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_remove_result__isset {
  _Producer_remove_result__isset() : success(false) {}
  bool success;
} _Producer_remove_result__isset;

class Producer_remove_result {
 public:

  Producer_remove_result() : success(0) {
  }

  virtual ~Producer_remove_result() throw() {}

  bool success;

  _Producer_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Producer_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_remove_presult__isset {
  _Producer_remove_presult__isset() : success(false) {}
  bool success;
} _Producer_remove_presult__isset;

class Producer_remove_presult {
 public:


  virtual ~Producer_remove_presult() throw() {}

  bool* success;

  _Producer_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_unshift_args__isset {
  _Producer_unshift_args__isset() : vtxno(false), newXHeadBlk(false) {}
  bool vtxno;
  bool newXHeadBlk;
} _Producer_unshift_args__isset;

class Producer_unshift_args {
 public:

  Producer_unshift_args() : vtxno(0) {
  }

  virtual ~Producer_unshift_args() throw() {}

  int32_t vtxno;
  std::vector<int8_t>  newXHeadBlk;

  _Producer_unshift_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_newXHeadBlk(const std::vector<int8_t> & val) {
    newXHeadBlk = val;
  }

  bool operator == (const Producer_unshift_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(newXHeadBlk == rhs.newXHeadBlk))
      return false;
    return true;
  }
  bool operator != (const Producer_unshift_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_unshift_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_unshift_pargs {
 public:


  virtual ~Producer_unshift_pargs() throw() {}

  const int32_t* vtxno;
  const std::vector<int8_t> * newXHeadBlk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_unshift_result__isset {
  _Producer_unshift_result__isset() : success(false) {}
  bool success;
} _Producer_unshift_result__isset;

class Producer_unshift_result {
 public:

  Producer_unshift_result() : success(0) {
  }

  virtual ~Producer_unshift_result() throw() {}

  int32_t success;

  _Producer_unshift_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Producer_unshift_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_unshift_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_unshift_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_unshift_presult__isset {
  _Producer_unshift_presult__isset() : success(false) {}
  bool success;
} _Producer_unshift_presult__isset;

class Producer_unshift_presult {
 public:


  virtual ~Producer_unshift_presult() throw() {}

  int32_t* success;

  _Producer_unshift_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_shift_args__isset {
  _Producer_shift_args__isset() : vtxno(false) {}
  bool vtxno;
} _Producer_shift_args__isset;

class Producer_shift_args {
 public:

  Producer_shift_args() : vtxno(0) {
  }

  virtual ~Producer_shift_args() throw() {}

  int32_t vtxno;

  _Producer_shift_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Producer_shift_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Producer_shift_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_shift_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_shift_pargs {
 public:


  virtual ~Producer_shift_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_shift_result__isset {
  _Producer_shift_result__isset() : success(false) {}
  bool success;
} _Producer_shift_result__isset;

class Producer_shift_result {
 public:

  Producer_shift_result() : success(0) {
  }

  virtual ~Producer_shift_result() throw() {}

  bool success;

  _Producer_shift_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Producer_shift_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_shift_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_shift_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_shift_presult__isset {
  _Producer_shift_presult__isset() : success(false) {}
  bool success;
} _Producer_shift_presult__isset;

class Producer_shift_presult {
 public:


  virtual ~Producer_shift_presult() throw() {}

  bool* success;

  _Producer_shift_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_push_args__isset {
  _Producer_push_args__isset() : vtxno(false), newXTailBlk(false) {}
  bool vtxno;
  bool newXTailBlk;
} _Producer_push_args__isset;

class Producer_push_args {
 public:

  Producer_push_args() : vtxno(0) {
  }

  virtual ~Producer_push_args() throw() {}

  int32_t vtxno;
  std::vector<int8_t>  newXTailBlk;

  _Producer_push_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_newXTailBlk(const std::vector<int8_t> & val) {
    newXTailBlk = val;
  }

  bool operator == (const Producer_push_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(newXTailBlk == rhs.newXTailBlk))
      return false;
    return true;
  }
  bool operator != (const Producer_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_push_pargs {
 public:


  virtual ~Producer_push_pargs() throw() {}

  const int32_t* vtxno;
  const std::vector<int8_t> * newXTailBlk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_push_result__isset {
  _Producer_push_result__isset() : success(false) {}
  bool success;
} _Producer_push_result__isset;

class Producer_push_result {
 public:

  Producer_push_result() : success(0) {
  }

  virtual ~Producer_push_result() throw() {}

  int32_t success;

  _Producer_push_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Producer_push_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_push_presult__isset {
  _Producer_push_presult__isset() : success(false) {}
  bool success;
} _Producer_push_presult__isset;

class Producer_push_presult {
 public:


  virtual ~Producer_push_presult() throw() {}

  int32_t* success;

  _Producer_push_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Producer_pop_args__isset {
  _Producer_pop_args__isset() : vtxno(false) {}
  bool vtxno;
} _Producer_pop_args__isset;

class Producer_pop_args {
 public:

  Producer_pop_args() : vtxno(0) {
  }

  virtual ~Producer_pop_args() throw() {}

  int32_t vtxno;

  _Producer_pop_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Producer_pop_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Producer_pop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_pop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Producer_pop_pargs {
 public:


  virtual ~Producer_pop_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_pop_result__isset {
  _Producer_pop_result__isset() : success(false) {}
  bool success;
} _Producer_pop_result__isset;

class Producer_pop_result {
 public:

  Producer_pop_result() : success(0) {
  }

  virtual ~Producer_pop_result() throw() {}

  bool success;

  _Producer_pop_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Producer_pop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Producer_pop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Producer_pop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Producer_pop_presult__isset {
  _Producer_pop_presult__isset() : success(false) {}
  bool success;
} _Producer_pop_presult__isset;

class Producer_pop_presult {
 public:


  virtual ~Producer_pop_presult() throw() {}

  bool* success;

  _Producer_pop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ProducerClient : virtual public ProducerIf {
 public:
  ProducerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ProducerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool report(const std::vector<int32_t> & subgraphKeys, const std::string& hostname);
  void send_report(const std::vector<int32_t> & subgraphKeys, const std::string& hostname);
  bool recv_report();
  void getHost(std::string& _return, const int32_t subgraphKey);
  void send_getHost(const int32_t subgraphKey);
  void recv_getHost(std::string& _return);
  int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk);
  void send_insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk);
  int32_t recv_insertPrev();
  int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk);
  void send_insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk);
  int32_t recv_insertNext();
  bool remove(const int32_t vtxno, const int32_t blkno);
  void send_remove(const int32_t vtxno, const int32_t blkno);
  bool recv_remove();
  int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk);
  void send_unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk);
  int32_t recv_unshift();
  bool shift(const int32_t vtxno);
  void send_shift(const int32_t vtxno);
  bool recv_shift();
  int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk);
  void send_push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk);
  int32_t recv_push();
  bool pop(const int32_t vtxno);
  void send_pop(const int32_t vtxno);
  bool recv_pop();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProducerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProducerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProducerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertPrev(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertNext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unshift(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shift(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProducerProcessor(boost::shared_ptr<ProducerIf> iface) :
    iface_(iface) {
    processMap_["report"] = &ProducerProcessor::process_report;
    processMap_["getHost"] = &ProducerProcessor::process_getHost;
    processMap_["insertPrev"] = &ProducerProcessor::process_insertPrev;
    processMap_["insertNext"] = &ProducerProcessor::process_insertNext;
    processMap_["remove"] = &ProducerProcessor::process_remove;
    processMap_["unshift"] = &ProducerProcessor::process_unshift;
    processMap_["shift"] = &ProducerProcessor::process_shift;
    processMap_["push"] = &ProducerProcessor::process_push;
    processMap_["pop"] = &ProducerProcessor::process_pop;
  }

  virtual ~ProducerProcessor() {}
};

class ProducerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProducerProcessorFactory(const ::boost::shared_ptr< ProducerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProducerIfFactory > handlerFactory_;
};

class ProducerMultiface : virtual public ProducerIf {
 public:
  ProducerMultiface(std::vector<boost::shared_ptr<ProducerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProducerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProducerIf> > ifaces_;
  ProducerMultiface() {}
  void add(boost::shared_ptr<ProducerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool report(const std::vector<int32_t> & subgraphKeys, const std::string& hostname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(subgraphKeys, hostname);
    }
    return ifaces_[i]->report(subgraphKeys, hostname);
  }

  void getHost(std::string& _return, const int32_t subgraphKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHost(_return, subgraphKey);
    }
    ifaces_[i]->getHost(_return, subgraphKey);
    return;
  }

  int32_t insertPrev(const int32_t vtxno, const int32_t nextBlkno, const std::vector<int8_t> & xblk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertPrev(vtxno, nextBlkno, xblk);
    }
    return ifaces_[i]->insertPrev(vtxno, nextBlkno, xblk);
  }

  int32_t insertNext(const int32_t vtxno, const int32_t prevBlkno, const std::vector<int8_t> & xblk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertNext(vtxno, prevBlkno, xblk);
    }
    return ifaces_[i]->insertNext(vtxno, prevBlkno, xblk);
  }

  bool remove(const int32_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(vtxno, blkno);
    }
    return ifaces_[i]->remove(vtxno, blkno);
  }

  int32_t unshift(const int32_t vtxno, const std::vector<int8_t> & newXHeadBlk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unshift(vtxno, newXHeadBlk);
    }
    return ifaces_[i]->unshift(vtxno, newXHeadBlk);
  }

  bool shift(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shift(vtxno);
    }
    return ifaces_[i]->shift(vtxno);
  }

  int32_t push(const int32_t vtxno, const std::vector<int8_t> & newXTailBlk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push(vtxno, newXTailBlk);
    }
    return ifaces_[i]->push(vtxno, newXTailBlk);
  }

  bool pop(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pop(vtxno);
    }
    return ifaces_[i]->pop(vtxno);
  }

};

}} // namespace

#endif
