/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Agent_H
#define Agent_H

#include <arpa/inet.h>
#include <thrift/TDispatchProcessor.h>
#include "Agent_types.h"

namespace nynn { namespace mm {

class AgentIf {
 public:
  virtual ~AgentIf() {}
  virtual bool lock(const int32_t vtxno) = 0;
  virtual bool unlock(const int32_t vtxno) = 0;
  virtual int32_t getHeadBlkno(const int32_t vtxno) = 0;
  virtual int32_t getTailBlkno(const int32_t vtxno) = 0;
  virtual void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno) = 0;
};

class AgentIfFactory {
 public:
  typedef AgentIf Handler;

  virtual ~AgentIfFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AgentIf* /* handler */) = 0;
};

class AgentIfSingletonFactory : virtual public AgentIfFactory {
 public:
  AgentIfSingletonFactory(const boost::shared_ptr<AgentIf>& iface) : iface_(iface) {}
  virtual ~AgentIfSingletonFactory() {}

  virtual AgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<AgentIf> iface_;
};

class AgentNull : virtual public AgentIf {
 public:
  virtual ~AgentNull() {}
  bool lock(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
  bool unlock(const int32_t /* vtxno */) {
    bool _return = false;
    return _return;
  }
  int32_t getHeadBlkno(const int32_t /* vtxno */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t getTailBlkno(const int32_t /* vtxno */) {
    int32_t _return = 0;
    return _return;
  }
  void read(std::vector<int8_t> & /* _return */, const int32_t /* vtxno */, const int32_t /* blkno */) {
    return;
  }
};

typedef struct _Agent_lock_args__isset {
  _Agent_lock_args__isset() : vtxno(false) {}
  bool vtxno;
} _Agent_lock_args__isset;

class Agent_lock_args {
 public:

  Agent_lock_args() : vtxno(0) {
  }

  virtual ~Agent_lock_args() throw() {}

  int32_t vtxno;

  _Agent_lock_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Agent_lock_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Agent_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_lock_pargs {
 public:


  virtual ~Agent_lock_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_lock_result__isset {
  _Agent_lock_result__isset() : success(false) {}
  bool success;
} _Agent_lock_result__isset;

class Agent_lock_result {
 public:

  Agent_lock_result() : success(0) {
  }

  virtual ~Agent_lock_result() throw() {}

  bool success;

  _Agent_lock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Agent_lock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_lock_presult__isset {
  _Agent_lock_presult__isset() : success(false) {}
  bool success;
} _Agent_lock_presult__isset;

class Agent_lock_presult {
 public:


  virtual ~Agent_lock_presult() throw() {}

  bool* success;

  _Agent_lock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_unlock_args__isset {
  _Agent_unlock_args__isset() : vtxno(false) {}
  bool vtxno;
} _Agent_unlock_args__isset;

class Agent_unlock_args {
 public:

  Agent_unlock_args() : vtxno(0) {
  }

  virtual ~Agent_unlock_args() throw() {}

  int32_t vtxno;

  _Agent_unlock_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Agent_unlock_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Agent_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_unlock_pargs {
 public:


  virtual ~Agent_unlock_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_unlock_result__isset {
  _Agent_unlock_result__isset() : success(false) {}
  bool success;
} _Agent_unlock_result__isset;

class Agent_unlock_result {
 public:

  Agent_unlock_result() : success(0) {
  }

  virtual ~Agent_unlock_result() throw() {}

  bool success;

  _Agent_unlock_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Agent_unlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_unlock_presult__isset {
  _Agent_unlock_presult__isset() : success(false) {}
  bool success;
} _Agent_unlock_presult__isset;

class Agent_unlock_presult {
 public:


  virtual ~Agent_unlock_presult() throw() {}

  bool* success;

  _Agent_unlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_getHeadBlkno_args__isset {
  _Agent_getHeadBlkno_args__isset() : vtxno(false) {}
  bool vtxno;
} _Agent_getHeadBlkno_args__isset;

class Agent_getHeadBlkno_args {
 public:

  Agent_getHeadBlkno_args() : vtxno(0) {
  }

  virtual ~Agent_getHeadBlkno_args() throw() {}

  int32_t vtxno;

  _Agent_getHeadBlkno_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Agent_getHeadBlkno_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Agent_getHeadBlkno_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_getHeadBlkno_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_getHeadBlkno_pargs {
 public:


  virtual ~Agent_getHeadBlkno_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_getHeadBlkno_result__isset {
  _Agent_getHeadBlkno_result__isset() : success(false) {}
  bool success;
} _Agent_getHeadBlkno_result__isset;

class Agent_getHeadBlkno_result {
 public:

  Agent_getHeadBlkno_result() : success(0) {
  }

  virtual ~Agent_getHeadBlkno_result() throw() {}

  int32_t success;

  _Agent_getHeadBlkno_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Agent_getHeadBlkno_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_getHeadBlkno_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_getHeadBlkno_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_getHeadBlkno_presult__isset {
  _Agent_getHeadBlkno_presult__isset() : success(false) {}
  bool success;
} _Agent_getHeadBlkno_presult__isset;

class Agent_getHeadBlkno_presult {
 public:


  virtual ~Agent_getHeadBlkno_presult() throw() {}

  int32_t* success;

  _Agent_getHeadBlkno_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_getTailBlkno_args__isset {
  _Agent_getTailBlkno_args__isset() : vtxno(false) {}
  bool vtxno;
} _Agent_getTailBlkno_args__isset;

class Agent_getTailBlkno_args {
 public:

  Agent_getTailBlkno_args() : vtxno(0) {
  }

  virtual ~Agent_getTailBlkno_args() throw() {}

  int32_t vtxno;

  _Agent_getTailBlkno_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  bool operator == (const Agent_getTailBlkno_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    return true;
  }
  bool operator != (const Agent_getTailBlkno_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_getTailBlkno_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_getTailBlkno_pargs {
 public:


  virtual ~Agent_getTailBlkno_pargs() throw() {}

  const int32_t* vtxno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_getTailBlkno_result__isset {
  _Agent_getTailBlkno_result__isset() : success(false) {}
  bool success;
} _Agent_getTailBlkno_result__isset;

class Agent_getTailBlkno_result {
 public:

  Agent_getTailBlkno_result() : success(0) {
  }

  virtual ~Agent_getTailBlkno_result() throw() {}

  int32_t success;

  _Agent_getTailBlkno_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Agent_getTailBlkno_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_getTailBlkno_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_getTailBlkno_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_getTailBlkno_presult__isset {
  _Agent_getTailBlkno_presult__isset() : success(false) {}
  bool success;
} _Agent_getTailBlkno_presult__isset;

class Agent_getTailBlkno_presult {
 public:


  virtual ~Agent_getTailBlkno_presult() throw() {}

  int32_t* success;

  _Agent_getTailBlkno_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Agent_read_args__isset {
  _Agent_read_args__isset() : vtxno(false), blkno(false) {}
  bool vtxno;
  bool blkno;
} _Agent_read_args__isset;

class Agent_read_args {
 public:

  Agent_read_args() : vtxno(0), blkno(0) {
  }

  virtual ~Agent_read_args() throw() {}

  int32_t vtxno;
  int32_t blkno;

  _Agent_read_args__isset __isset;

  void __set_vtxno(const int32_t val) {
    vtxno = val;
  }

  void __set_blkno(const int32_t val) {
    blkno = val;
  }

  bool operator == (const Agent_read_args & rhs) const
  {
    if (!(vtxno == rhs.vtxno))
      return false;
    if (!(blkno == rhs.blkno))
      return false;
    return true;
  }
  bool operator != (const Agent_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Agent_read_pargs {
 public:


  virtual ~Agent_read_pargs() throw() {}

  const int32_t* vtxno;
  const int32_t* blkno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_read_result__isset {
  _Agent_read_result__isset() : success(false) {}
  bool success;
} _Agent_read_result__isset;

class Agent_read_result {
 public:

  Agent_read_result() {
  }

  virtual ~Agent_read_result() throw() {}

  std::vector<int8_t>  success;

  _Agent_read_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val) {
    success = val;
  }

  bool operator == (const Agent_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Agent_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Agent_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Agent_read_presult__isset {
  _Agent_read_presult__isset() : success(false) {}
  bool success;
} _Agent_read_presult__isset;

class Agent_read_presult {
 public:


  virtual ~Agent_read_presult() throw() {}

  std::vector<int8_t> * success;

  _Agent_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AgentClient : virtual public AgentIf {
 public:
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool lock(const int32_t vtxno);
  void send_lock(const int32_t vtxno);
  bool recv_lock();
  bool unlock(const int32_t vtxno);
  void send_unlock(const int32_t vtxno);
  bool recv_unlock();
  int32_t getHeadBlkno(const int32_t vtxno);
  void send_getHeadBlkno(const int32_t vtxno);
  int32_t recv_getHeadBlkno();
  int32_t getTailBlkno(const int32_t vtxno);
  void send_getTailBlkno(const int32_t vtxno);
  int32_t recv_getTailBlkno();
  void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno);
  void send_read(const int32_t vtxno, const int32_t blkno);
  void recv_read(std::vector<int8_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHeadBlkno(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTailBlkno(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AgentProcessor(boost::shared_ptr<AgentIf> iface) :
    iface_(iface) {
    processMap_["lock"] = &AgentProcessor::process_lock;
    processMap_["unlock"] = &AgentProcessor::process_unlock;
    processMap_["getHeadBlkno"] = &AgentProcessor::process_getHeadBlkno;
    processMap_["getTailBlkno"] = &AgentProcessor::process_getTailBlkno;
    processMap_["read"] = &AgentProcessor::process_read;
  }

  virtual ~AgentProcessor() {}
};

class AgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AgentProcessorFactory(const ::boost::shared_ptr< AgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AgentIfFactory > handlerFactory_;
};

class AgentMultiface : virtual public AgentIf {
 public:
  AgentMultiface(std::vector<boost::shared_ptr<AgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AgentIf> > ifaces_;
  AgentMultiface() {}
  void add(boost::shared_ptr<AgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool lock(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock(vtxno);
    }
    return ifaces_[i]->lock(vtxno);
  }

  bool unlock(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock(vtxno);
    }
    return ifaces_[i]->unlock(vtxno);
  }

  int32_t getHeadBlkno(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHeadBlkno(vtxno);
    }
    return ifaces_[i]->getHeadBlkno(vtxno);
  }

  int32_t getTailBlkno(const int32_t vtxno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTailBlkno(vtxno);
    }
    return ifaces_[i]->getTailBlkno(vtxno);
  }

  void read(std::vector<int8_t> & _return, const int32_t vtxno, const int32_t blkno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, vtxno, blkno);
    }
    ifaces_[i]->read(_return, vtxno, blkno);
    return;
  }

};

}} // namespace

#endif
